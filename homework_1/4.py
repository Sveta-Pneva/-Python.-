"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

accounts = [["a", "qwerty", False], ["b", "qwerty", True], ["c", "qwerty", False]]
def checker(lst): # f = n**2 + n - квадратичная
    for i in lst: #n
        if i[2] == True: #n
            print(i[0], "допущен") #1
        else: #
            print(i[0], "не допущен") #1

checker(accounts)

ac = {("o", "qwerty"): False, ("p", "qwerty"): True, ("u", "qwerty"): True}
def checker_1(dct): #f = n * n + n * 2n + n = 3n**2 + n - квадратичная(менее эфективная)
    for key, val in dct.items(): #n
        if val == False: #n
            dct[key] = "не допущен" #1
        else:
            dct[key] = "допущен" #1
    new_dict = dict(zip([key[0] for key in dct], [i for i in dct.values()])) #n * 2n
    for i in new_dict: #n
        print(i, new_dict[i]) #1

checker_1(ac)

