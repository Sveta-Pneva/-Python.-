"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для второго скрипта
"""
"""2. Реализовать класс Road (дорога).
определить атрибуты: length (длина), width (ширина);
значения атрибутов должны передаваться при создании экземпляра класса;
атрибуты сделать защищёнными;
определить метод расчёта массы асфальта, необходимого для покрытия всей дороги;
использовать формулу: длина * ширина * масса асфальта для покрытия одного кв. метра дороги асфальтом, толщиной в 1 см * число см толщины полотна;
проверить работу метода.
Например: 20 м*5000 м*25 кг*5 см = 12500 т."""
from pympler import asizeof
#before
class Road:
    def __init__(self, _length=0, _width=0, _m=25, _depth=1):
        self._length = _length
        self._width = _width
        self._m = _m
        self._depth = _depth
    def calc_m_asphalt(self):
        result = self._length * self._width * self._m * self._depth
        return result


r = Road(1, 2, 6, 24)
a = r.calc_m_asphalt()
r1 = Road(2, 4, 12, 48)
a1 = r1.calc_m_asphalt()
r2 = Road(2, 3, 7, 25)
a2 = r2.calc_m_asphalt()
r3 = Road(1, 3, 11, 47)
a3 = r3.calc_m_asphalt()
r4 = Road(4, 16, 144, 2304)
a4 = r4.calc_m_asphalt()
print(a, a1, a2, a3, a4)
print(asizeof.asizeof(r, r1, r2, r3, r4))
print(asizeof.asizeof(a, a1, a2, a3, a4))

#after
class Road_1:
    __slots__ = ("_length", "_width", "_m", "_depth")
    def __init__(self, _length=0, _width=0, _m=25, _depth=1):
        self._length = _length
        self._width = _width
        self._m = _m
        self._depth = _depth
    def calc_m_asphalt(self):
        result = self._length * self._width * self._m * self._depth
        return f"{result} "

d = Road_1(1, 2, 6, 24)
b = d.calc_m_asphalt()
d1 = Road_1(2, 4, 12, 48)
b += d1.calc_m_asphalt()
d2 = Road_1(2, 3, 7, 25)
b += d2.calc_m_asphalt()
d3 = Road_1(1, 3, 11, 47)
b += d3.calc_m_asphalt()
d4 = Road_1(4, 16, 144, 2304)
b += d4.calc_m_asphalt()
print(b)
print(asizeof.asizeof(d, d1, d2, d3, d4))
print(asizeof.asizeof(b))