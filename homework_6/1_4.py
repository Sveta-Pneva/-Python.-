"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для второго скрипта
"""
"""Сформировать из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
то надо вывести число 6843."""

from memory_profiler import profile

#before
def func(num, reverse_num=0, m="", l=[]):
    if num > 9:
        l.append(num)
        n = num % 10
        if n == 0 and num == l[0]:
            m = "0"
        num -= n
        num //= 10
        reverse_num = reverse_num * 10 + n
        return func(num, reverse_num, m, l)
    else:
        reverse_num = reverse_num * 10 + num
        return m + str(reverse_num)

@profile()
def reverser_num(num):
    return func(num)

print(reverser_num(123050**91))
"""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    47     19.6 MiB     19.6 MiB           1   @profile()
    48                                         def reverser_num(num):
    49     20.5 MiB      0.8 MiB           1       return func(num)"""


#after
@profile
def reverser_num_1(num):
    return str(num)[::-1]

print(reverser_num_1(123050**91))
"""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     19.5 MiB     19.5 MiB           1   @profile
    37                                         def reverser_num_1(num):
    38     19.5 MiB      0.0 MiB           1       return str(num)[::-1]
"""