"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для второго скрипта
"""
"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5)."""
from memory_profiler import profile

#before
def func(num, ch=0, nch=0):
    if num > 9:
        n = num % 10
        num -= n
        num //= 10
        if n % 2 == 0:
            ch += 1
        else:
            nch += 1
        return func(num, ch, nch)
    else:
        if num % 2 == 0:
            ch += 1
        else:
            nch += 1
        return ch, nch

@profile()
def count_num(num):
    return func(num)

print(count_num(12345**121))
"""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    49     19.5 MiB     19.5 MiB           1   @profile()
    50                                         def count_num(num):
    51     20.3 MiB      0.9 MiB           1       return func(num)
"""


#after
@profile()
def count_num_1(num):
    ch = 0
    nch = 0
    while num > 0:
        if num % 2 == 0:
            ch += 1
        else:
            nch += 1
        num //= 10
    return ch, nch
print(count_num_1(12345**121))
"""Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    35     19.5 MiB     19.5 MiB           1   @profile()
    36                                         def count_num_1(num):
    37     19.5 MiB      0.0 MiB           1       ch = 0
    38     19.5 MiB      0.0 MiB           1       nch = 0
    39     19.5 MiB      0.0 MiB         497       while num > 0:
    40     19.5 MiB      0.0 MiB         496           if num % 2 == 0:
    41     19.5 MiB      0.0 MiB         248               ch += 1
    42                                                 else:
    43     19.5 MiB      0.0 MiB         248               nch += 1
    44     19.5 MiB      0.0 MiB         496           num //= 10
    45     19.5 MiB      0.0 MiB           1       return ch, nch
"""